AWSTemplateFormatVersion: 2010-09-09

Description: This is Udacity Challenge 2 to Launch VPC with a Public/Private Subnet and Placing NAT Gateway in Public Subnet with a Route to Internet Gateway.

Parameters:
  EnvironmentName:
    Description: Environment for logical grouping of our Resources
    Type: String

  AMI:
    Description: AMI for the instance.
    Type: String

  vpcCIDR:
    Description: CIDR Notation for VPC
    Type: String

  PublicSubnetCIDR:
    Description: CIDR Notation for Public Subnet
    Type: String

  PrivateSubnetCIDR:
    Description: CIDR Notation for Private Subnet
    Type: String

  KeyPair:
    Description: Key to SSH into EC2 Instance
    Type: String

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref vpcCIDR
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-VPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PUB-SN

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PUB-RT

  PublicRouteTableAssocication:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      CidrBlock: !Ref PrivateSubnetCIDR
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PRI-SN

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PRI-RT

  PrivateRouteTableAssocication:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  NATGatewayElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayElasticIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NAT-Gateway

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-IGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

Outputs:
  VPC:
    Description: VPC-ID to be used in another stack
    Value: !Ref VPC
    Export:
      Name: !Sub ${EnvironmentName}-VPCID

  PrivateSubnet:
    Description: Private Subnet ID to be used in another stack
    Value: !Ref PrivateSubnet
    Export:
      Name: !Sub ${EnvironmentName}-PRI-SN

  PublicSubnet:
    Description: Public Subnet to be used in another stack
    Value: !Ref PublicSubnet
    Export:
      Name: !Sub ${EnvironmentName}-PUB-SN
